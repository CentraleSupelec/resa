#!/usr/bin/env node

// lib
const http = require("http");
const https = require("https");
const debug = require("debug")("back:server");
const fs = require("fs");

// src
const app = require("../app");
const config = require("../config");

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const result = parseInt(val, 10);

  if (Number.isNaN(result)) {
    // named pipe
    return val;
  }

  if (result >= 0) {
    // port number
    return result;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

const onError = (port) => (error) => {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
};

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = (server) => () => {
  const addr = server.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
};

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.server.port || process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP or HTTPS server.
 */

const createServer = () => {
  return http.createServer(app);
};

const server = createServer();
console.log(
  `[express] started on port ${port} with NODE_ENV ${process.env.NODE_ENV}`,
);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, "0.0.0.0");
server.on("error", onError(port));
server.on("listening", onListening(server));
